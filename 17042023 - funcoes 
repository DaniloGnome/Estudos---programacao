{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO23P+o6fAeswJAhRCrBUc5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DaniloGnome/Program--Prof-Pablo/blob/main/17042023%20-%20funcoes%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "id": "NMWg4zMWMga_"
      },
      "outputs": [],
      "source": [
        "def mediaTotal(*notas):\n",
        "  soma = 0\n",
        "  for nota in notas:\n",
        "    soma += nota\n",
        "  media = soma/len(notas)\n",
        "  return media"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mediaTotal(6,8,5,4,7,8,9,6,4,3,5,7,9,9,7,6,5,4,9,7,2,4,6,7,4,7,5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BYfGu3ewNzIN",
        "outputId": "cd79e255-4f1a-4eae-da11-f54b36d24b58"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.037037037037037"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BKhE0WAvexYQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### recebe varios numeros\n",
        "### e retorna o maior\n",
        "def retornaMaior(*numeros): ### o * serve para mostrar que não é uma lista\n",
        "  maior = 0  ## o maior numero para iniciar é 0\n",
        "  for n in numeros:\n",
        "    if (n >= maior):\n",
        "      maior = n\n",
        "  return maior"
      ],
      "metadata": {
        "id": "v3GcFKCsPYlN"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "retornaMaior(2,30,2,5,6,8,2,222,145)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AmkwMRP1cAXp",
        "outputId": "447ad893-065b-448a-f9ff-d43b3b46c473"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "222"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#valor de parametro padrao\n",
        "def nacionalidade (country = 'cuba'): ### caso nacionalidade() esteja vazio, o pais CUBA será colocado no lugar\n",
        "  print ('Eu nasci em : '+ country)"
      ],
      "metadata": {
        "id": "7_dFIPUYcuJI"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nacionalidade('brasil')\n",
        "nacionalidade('franca')\n",
        "nacionalidade('EUA')\n",
        "nacionalidade('Mexico')\n",
        "nacionalidade()\n"
      ],
      "metadata": {
        "id": "TkiZd2fNfAhM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def soma (a,b):\n",
        "  return a + b"
      ],
      "metadata": {
        "id": "hzbrImS2fwgB"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "soma (2,5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N64zK-GXiPWj",
        "outputId": "1436f716-3ade-4cd1-88c7-83f9baffc6d0"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def valorAbsoluto(num):\n",
        " if (num < 0):\n",
        "   num = num * -1\n",
        " return num"
      ],
      "metadata": {
        "id": "JAZZ6o9-iWv-"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "valorAbsoluto (-20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BKCk-KA6i9ZK",
        "outputId": "739e27c9-97e7-4949-ecd2-3acea3e15b38"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def maiorque3(lista):\n",
        "  novaLista = []\n",
        "  for item in lista:\n",
        "    if(len(item)>3):\n",
        "      novaLista.append(item)\n",
        "  return novaLista"
      ],
      "metadata": {
        "id": "p_iGvsF3jXFN"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "frutas = ['manbada', 'uva', 'pinha']\n",
        "maiorque3(frutas)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zGx0pqLRki70",
        "outputId": "1a9c1c5c-757f-4abd-a4f6-d3e2058d8a76"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['manbada', 'pinha']"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    }
  ]
}